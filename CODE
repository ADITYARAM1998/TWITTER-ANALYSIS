#Importing libraries

import sklearn
import numpy as np
import pandas as pd

#Import data


#TRAINING DATA

train = pd.read_csv("train.csv")

#TEST DATA

test = pd.read_csv("test.csv")

#Data Exploration(Analysis)

train.head()

test.tail()

#Non racist/Sexist related tweets

sum(train["label"] == 0)

#Checking for missing values

train.isnull().sum()

**DATA CLEANING USING TWEEET-PREPROCESSOR MODULE**

#INSTALLING TWEET PREPOCESSOR

!pip install tweet-preprocessor

#Removing special characters using regular expression

import re



REPLACE_NO_SPACE = re.compile("(\.)|(\;)|(\:)|(\!)|(\')|(\?)|(\,)|(\")|(\|)|(\()|(\))|(\[)|(\])|(\%)|(\$)|(\>)|(\<)|(\{)|(\})")
REPLACE_WITH_SPACE = re.compile("(<br\s/><br\s/?)|(-)|(/)|(:).")

#prepocessing of data

import preprocessor as p

# custum function to clean the dataset (combining tweet_preprocessor and reguar expression)
def clean_tweets(df):
  tempArr = []
  for line in df:
    # send to tweet_processor
    tmpL = p.clean(line)
    # remove puctuation
    tmpL = REPLACE_NO_SPACE.sub("", tmpL.lower()) # convert all tweets to lower cases
    tmpL = REPLACE_WITH_SPACE.sub(" ", tmpL)
    tempArr.append(tmpL)
  return tempArr

##clean train data

train_tweet = clean_tweets(train["tweet"])
train_tweet = pd.DataFrame(train_tweet)

###Appending cleaned tweets to the trained data

train["clean_tweet"] = train_tweet

##Comparing cleaned and uncleaned Tweets

train.head(10)

##Clean the test data and append the cleaned tweets to the test data

test_tweet = clean_tweets(test["tweet"])
test_tweet = pd.DataFrame(test_tweet)

##Append cleaned tweets to the training data

test["clean_tweet"] = test_tweet

##Compare the cleaned and uncleaned tweets

test.tail()

##Test and Train split

from sklearn.model_selection import train_test_split

# extract the labels from the train data
y = train.label.values

# use 70% for the training and 30% for the test
x_train, x_test, y_train, y_test = train_test_split(train.clean_tweet.values, y, 
                                                    stratify=y, 
                                                    random_state=1, 
                                                    test_size=0.3, shuffle=True)

##Vectorize tweets using CountVectorizer(example)

from sklearn.feature_extraction.text import CountVectorizer

documents = ["This is Import Data's Youtube channel",
             "Data science is my passion and it is fun!",
             "Please subscribe to my channel"]

# initializing the countvectorizer
vectorizer = CountVectorizer()

# tokenize and make the document into a matrix
document_term_matrix = vectorizer.fit_transform(documents)

# check the result
pd.DataFrame(document_term_matrix.toarray(), columns = vectorizer.get_feature_names())

from sklearn.feature_extraction.text import CountVectorizer

# vectorize tweets for model building
vectorizer = CountVectorizer(binary=True, stop_words='english')

# learn a vocabulary dictionary of all tokens in the raw documents
vectorizer.fit(list(x_train) + list(x_test))

# transform documents to document-term matrix
x_train_vec = vectorizer.transform(x_train)
x_test_vec = vectorizer.transform(x_test)

##Model building
Apply Support Vetor Classifier (SVC)##

from sklearn import svm

# classify using support vector classifier
    svm = svm.SVC(kernel = 'linear', probability=True)

# fit the SVC model based on the given training data
   
   prob = svm.fit(x_train_vec, y_train).predict_proba(x_test_vec)

# perform classification and prediction on samples in x_test

    y_pred_svm = svm.predict(x_test_vec)

##Accuracy score for SVC

    from sklearn.metrics import accuracy_score
print("Accuracy score for SVC is: ", accuracy_score(y_test, y_pred_svm) * 100, '%')
